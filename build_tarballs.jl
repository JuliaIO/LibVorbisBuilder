# Note that this script can accept some limited command-line arguments, run
# `julia build_tarballs.jl --help` to see a usage message.
using BinaryBuilder
name = "libvorbis"
version = v"1.3.6"
# Collection of sources required to build imagemagick
# function url2hash(url)
#     path = download(url)
#     open(io-> bytes2hex(BinaryProvider.sha256(io)), path)
# end
# url2hash("https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.6.tar.xz")
sources = [
    "https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.6.tar.xz" =>
    "af00bb5a784e7c9e69f56823de4637c350643deedaf333d0fa86ecdba6fcb415",
]

# Bash recipe for building across all platforms
script = raw"""
cd $WORKSPACE/srcdir
cd libvorbis-1.3.6/
./configure --prefix=$prefix --host=$target
make -j${ncore}
make install
exit
"""

# These are the platforms we will build for by default, unless further
# platforms are passed in on the command line
platforms = [
    # Linux(:i686, :glibc),
    Linux(:x86_64, :glibc),
    # Linux(:aarch64, :glibc),
    # Linux(:armv7l, :glibc, :eabihf),
    # Linux(:powerpc64le, :glibc),
    # Linux(:i686, :musl),
    # Linux(:x86_64, :musl),
    # Linux(:aarch64, :musl),
    # Linux(:armv7l, :musl, :eabihf),
    # MacOS(:x86_64),
    # FreeBSD(:x86_64),
    # Windows(:i686),
    Windows(:x86_64)
]

# The products that we will ensure are always built
products(prefix) = [
    LibraryProduct(prefix, "libvorbis", :libvorbis),
]

# Dependencies that must be installed before this package can be built
dependencies = [
    BinaryBuilder.InlineBuildDependency(raw"""
using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libogg"], :libogg),
]

# Download binaries from hosted location

bin_prefix = "https://github.com/staticfloat/OggBuilder/releases/download/v1.3.3-6/"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/Ogg.v1.3.3.aarch64-linux-gnu.tar.gz", "ce2329057df10e4f1755da696a5d5e597e1a9157a85992f143d03857f4af259c"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Ogg.v1.3.3.arm-linux-gnueabihf.tar.gz", "a70830decaee040793b5c6a8f8900ed81720aee51125a3aab22440b26e45997a"),
    Linux(:i686, :glibc) => ("$bin_prefix/Ogg.v1.3.3.i686-linux-gnu.tar.gz", "1045d82da61ff9574d91f490a7be0b9e6ce17f6777b6e9e94c3c897cc53dd284"),
    Linux(:i686, :musl) => ("$bin_prefix/Ogg.v1.3.3.i686-linux-musl.tar.gz", "d8fc3c201ea40feeb05bc84d7159286584427f54776e316ef537ff32347c4007"),
    Windows(:i686) => ("$bin_prefix/Ogg.v1.3.3.i686-w64-mingw32.tar.gz", "3f6f6f524137a178e9df7cb5ea5427de6694c2a44ef78f1491d22bd9c6c8a0e8"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/Ogg.v1.3.3.powerpc64le-linux-gnu.tar.gz", "b133194a9527f087bbf942f77bf6a953cb8c277c98f609479bce976a31a5ba39"),
    MacOS(:x86_64) => ("$bin_prefix/Ogg.v1.3.3.x86_64-apple-darwin14.tar.gz", "077898aed79bbce121c5e3d5cd2741f50be1a7b5998943328eab5406249ac295"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/Ogg.v1.3.3.x86_64-linux-gnu.tar.gz", "6ef771242553b96262d57b978358887a056034a3c630835c76062dca8b139ea6"),
    Linux(:x86_64, :musl) => ("$bin_prefix/Ogg.v1.3.3.x86_64-linux-musl.tar.gz", "a7ff6bf9b28e1109fe26c4afb9c533f7df5cf04ace118aaae76c2fbb4c296b99"),
    FreeBSD(:x86_64) => ("$bin_prefix/Ogg.v1.3.3.x86_64-unknown-freebsd11.1.tar.gz", "a87e432f1e80880200b18decc33df87634129a2f9d06200cae89ad8ddde477b6"),
    Windows(:x86_64) => ("$bin_prefix/Ogg.v1.3.3.x86_64-w64-mingw32.tar.gz", "c6afdfb19d9b0d20b24a6802e49a1fbb08ddd6a2d1da7f14b68f8627fd55833a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)

""")
]


# Build the tarballs, and possibly a `build.jl` as well.
build_tarballs(ARGS, name, version, sources, script, platforms, products, dependencies)
